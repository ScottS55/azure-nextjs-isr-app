Set up lint, prettier, basic code formatter rules. - DONE
Set up basic nextjs app - DONE
Install needed npm packages - DONE
Get local running nextjs app - DONE
Get nextjs app running in static mode. - DONE

Personalize app to being more than just a default - set up for experimentation.
Look into ISR configuration (LOCAL)
- This will probably include setting up the api locally. Not entirely sure if anything is needed other than the app server.
- Most likely triggered via a postman 2 setup. If we do test this way, then the collection should be stored in a tools folder of this repository

Look into personal project azure hosting options
Set up node js app server.
Look into deployment options. Not really worth paying for a devops pipeline if it's more than 5$ a month, so it might be azure cli city.
Deploy and run the server statically
Confirm that ISR works via postmanning the server.

Export templates and clean up. Probably want to store them in a separate repo. Maybe in the same to keep it simple. Maybe in another to pad the github.
Update the readme at some point.

Start developing more web features? Try out packages that wouldn't work in a company setting? Playground it? Who knoooows.

APP IDEAS

Currency exchange rates with a public API to demonstrate page regeneration. As rates update daily, it should be a good way to display regenerating routes. It also should have
a good amount of data.

Downside is that rates generally always change day to day, so a daily rebuild would probably be better for this app. 
But we don't have a great way to demonstrate something that infrequently changes like Store / Site / Status info where ISR would be better. 

Steps: 
- Determine app fetch (historical range based on current date? only for usd/eur/yen?)
- Build out static routes / props to generate based on fetch
- Build out page to display data (ROUGH)
- Start looking into ISR to manually trigger rebuilds
- Update page to look a little fancier.
- Look into azure hosting